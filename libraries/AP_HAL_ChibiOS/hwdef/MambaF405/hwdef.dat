# hw definition file for processing by chibios_pins.py
# Mamba F405 MK2
# with F405 mcu, mpu6000 imu and 7456 series osd
@ thanks to betaflight for pin information

# MCU class and specific type.
MCU STM32F4xx STM32F405xx

HAL_CHIBIOS_ARCH_F405 1

# board ID for firmware load
APJ_BOARD_ID 1019

# crystal frequency
OSCILLATOR_HZ 8000000

# board voltage
STM32_VDD 330U

STM32_ST_USE_TIMER 5

# order of I2C buses
I2C_ORDER I2C1 I2C2

# order of UARTs (and USB)
# this order follows the labels on the board
# namely COMPUTER, PPM/SBUS (configurable as USART), TX3/RX3, TX6/RX6
SERIAL_ORDER OTG1 USART1 EMPTY USART3 EMPTY EMPTY USART6

# The pins that USB is connected on
PA11 OTG_FS_DM OTG1
PA12 OTG_FS_DP OTG1
PC5 VBUS INPUT OPENDRAIN

# USART1 is wired to SBUS and PPM input
# RC input defaults to timer capture
PA10 TIM1_CH3 TIM1 RCININT PULLDOWN
PA9 USART1_TX USART1 NODMA

# alt config to allow RCIN on UART for bi-directional
# protocols like FPort when BRD_ALT_CONFIG=2, 3, 6 & 7
PA10 USART1_RX USART1 NODMA ALT(2)
PA10 USART1_RX USART1 NODMA ALT(3)
PA10 USART1_RX USART1 NODMA ALT(6)
PA10 USART1_RX USART1 NODMA ALT(7)

# SBUS inversion control pin, active low,
# is inverted when BRD_ALT_CONFIG=1, 3, 5 & 7
PC0 SBUS_INVERT_RX OUTPUT HIGH
PC0 SBUS_INVERT_RX OUTPUT LOW ALT(1)
PC0 SBUS_INVERT_RX OUTPUT LOW ALT(3)
PC0 SBUS_INVERT_RX OUTPUT LOW ALT(5)
PC0 SBUS_INVERT_RX OUTPUT LOW ALT(7)

# USART3
PB10 USART3_TX USART3
PB11 USART3_RX USART3

# alt config to use Serial 3 as I2C2 when BRD_ALT_CONFIG=4, 5, 6 & 7
PB10 I2C2_SCL I2C2 PULLUP ALT(4)
PB11 I2C2_SDA I2C2 PULLUP ALT(5)
PB10 I2C2_SCL I2C2 PULLUP ALT(6)
PB11 I2C2_SDA I2C2 PULLUP ALT(7)

# USART6
PC6 USART6_TX USART6
PC7 USART6_RX USART6

# The pins for SWD debugging with a STlinkv2 or black-magic probe (not tested)
PA13 JTMS-SWDIO SWD
PA14 JTCK-SWCLK SWD

#adc
PC1 BAT_VOLT_SENS ADC1 SCALE(1)
PC2 RSSI_IN ADC1
PC3 BAT_CURR_SENS ADC1 SCALE(1)

#pwm output. 1 - 4 on ESC header
PA3 TIM2_CH4  TIM2 PWM(1) GPIO(50)
PB0 TIM3_CH3 TIM3 PWM(2) GPIO(51)
PB1 TIM3_CH4 TIM3 PWM(3) GPIO(52)
PA2 TIM2_CH3  TIM2 PWM(4) GPIO(53)

# Board LEDs
PB5 LED_BLUE OUTPUT LOW GPIO(1)
PB4 LED_GREEN OUTPUT LOW GPIO(2)
define HAL_GPIO_A_LED_PIN 1
define HAL_GPIO_B_LED_PIN 2

# note that this board needs PULLUP on I2C pins
PB6 I2C1_SCL I2C1 PULLUP
PB7 I2C1_SDA I2C1 PULLUP

# SPI1 - Internal IMU
PA4 MPU6000_CS CS
PA5 SPI1_SCK SPI1
PA6 SPI1_MISO SPI1
PA7 SPI1_MOSI SPI1

# SPI2 - OSD
PB15 SPI2_MOSI SPI2
PB14 SPI2_MISO SPI2
PB13 SPI2_SCK SPI2
# OSD max7456
PB12 OSD_CS CS

# SPI3 - dataflash
PC10 SPI3_SCK SPI3
PC11 SPI3_MISO SPI3
PC12 SPI3_MOSI SPI3
# dataflash M25P16
PB3 FLASH_CS CS

# SPI Device table
SPIDEV mpu6000    SPI1 DEVID1 MPU6000_CS MODE3 1*MHZ 8*MHZ
SPIDEV dataflash  SPI3 DEVID1 FLASH_CS   MODE3 32*MHZ 32*MHZ
SPIDEV osd        SPI2 DEVID4 OSD_CS MODE0 10*MHZ 10*MHZ

# one IMU rotated in yaw
IMU Invensense SPI:mpu6000 ROTATION_YAW_180

# no baro
define HAL_PROBE_EXTERNAL_I2C_BAROS
define HAL_BARO_ALLOW_INIT_NO_BARO

# no built-in compass, but probe the i2c bus for all possible
# external compass types
define ALLOW_ARM_NO_COMPASS
define HAL_COMPASS_DEFAULT HAL_COMPASS_NONE
define HAL_PROBE_EXTERNAL_I2C_COMPASSES
define HAL_I2C_INTERNAL_MASK 0
define HAL_COMPASS_AUTO_ROT_DEFAULT 2

# enable logging to dataflash
define HAL_LOGGING_DATAFLASH
define HAL_STORAGE_SIZE 16384
define STORAGE_FLASH_PAGE 1

# flash size
FLASH_SIZE_KB 1024
# reserve 32k for bootloader and 32k for flash storage
FLASH_RESERVE_START_KB 64

# define default battery setup
define HAL_BATT_VOLT_PIN 12
define HAL_BATT_CURR_PIN 11
define HAL_BATT_VOLT_SCALE 11
define HAL_BATT_CURR_SCALE 18.2

#analog rssi pin (also could be used as analog airspeed input)
# PA0 - ADC123_CH0
define BOARD_RSSI_ANA_PIN 0

# setup for OSD
define OSD_ENABLED 1
define HAL_OSD_TYPE_DEFAULT 1
#font for the osd
ROMFS_WILDCARD libraries/AP_OSD/fonts/font*.bin

#To complementary channels work we define this
#define STM32_PWM_USE_ADVANCED TRUE

define BOARD_PWM_COUNT_DEFAULT 4

#define CH_DBG_ENABLE_ASSERTS TRUE
#define CH_DBG_ENABLE_CHECKS TRUE
#define CH_DBG_SYSTEM_STATE_CHECK TRUE
#define CH_DBG_ENABLE_STACK_CHECK TRUE
